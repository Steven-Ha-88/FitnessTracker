{"ast":null,"code":"import { FETCH_EXERCISES, FETCH_EXERCISES_ERROR, FETCH_USERS, FETCH_USER, FETCH_USERS_ERROR, LOADING } from \"./types\";\nimport api from \"./../api\";\n\nconst fetchExercises = data => ({\n  type: FETCH_EXERCISES,\n  payload: data\n});\n\nconst fetchExercisesError = err => ({\n  type: FETCH_EXERCISES_ERROR,\n  payload: err\n});\n\nconst fetchUsers = users => ({\n  type: FETCH_USERS,\n  payload: users\n});\n\nconst fetchUsername = user => ({\n  type: FETCH_USER,\n  payload: user\n});\n\nconst loading = () => ({\n  type: LOADING\n});\n\nconst fetchUsersError = data => ({\n  type: FETCH_USERS_ERROR,\n  payload: data\n}); //<---------Exercise actions----------->\n\n\nexport const getExercises = () => async dispatch => {\n  dispatch(loading());\n\n  try {\n    const response = await api.get(\"exercises/\");\n    console.log(\"Exercises:\", response.data);\n    dispatch(fetchExercises(response.data));\n  } catch (e) {\n    dispatch(fetchExercisesError(\"City/State not found!\"));\n  }\n}; // export const editExercise = (id) => async (dispatch) => {\n//   const response = await api.get(\"exercises/\", id);\n//   console.log(response);\n//   console.log(\"added!\");\n// };\n\nexport const updateExercise = (id, exercise) => async dispatch => {\n  const response = await api.post(`exercises/update/${id}`, exercise);\n  console.log(\"response!!!\", response);\n  console.log(\"updated!\");\n};\nexport const addExercise = exercise => async dispatch => {\n  const response = await api.post(\"http://localhost:5000/exercises/add\", exercise);\n  console.log(response);\n};\nexport const deleteExercise = id => async dispatch => {\n  const response = await api.delete(\"exercises/\" + id);\n  console.log(\"delete\", response);\n}; //<---------User actions----------->\n\nexport const getUsers = () => async dispatch => {\n  dispatch(loading());\n\n  try {\n    const response = await api.get(\"users/\"); // console.log(\"Users:\", response.data);\n\n    const users = response.data.map(user => user.username);\n    const first_username = users[0];\n    dispatch(fetchUsers(users));\n    dispatch(fetchUsername(first_username));\n  } catch (e) {\n    dispatch(fetchUsersError(\"City/State not found!\"));\n  }\n};\nexport const addUser = user => async dispatch => {\n  dispatch(loading());\n\n  try {\n    const response = await api.post(\"users/add\", user);\n    console.log(\"USER ADDED\", response);\n  } catch (e) {\n    dispatch(fetchUsersError(\"City/State not found!\"));\n  }\n};","map":{"version":3,"sources":["/Users/ming/Projects/mern/src/_actions/index.js"],"names":["FETCH_EXERCISES","FETCH_EXERCISES_ERROR","FETCH_USERS","FETCH_USER","FETCH_USERS_ERROR","LOADING","api","fetchExercises","data","type","payload","fetchExercisesError","err","fetchUsers","users","fetchUsername","user","loading","fetchUsersError","getExercises","dispatch","response","get","console","log","e","updateExercise","id","exercise","post","addExercise","deleteExercise","delete","getUsers","map","username","first_username","addUser"],"mappings":"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","sourcesContent":["import {\n  FETCH_EXERCISES,\n  FETCH_EXERCISES_ERROR,\n  FETCH_USERS,\n  FETCH_USER,\n  FETCH_USERS_ERROR,\n  LOADING,\n} from \"./types\";\n\nimport api from \"./../api\";\n\nconst fetchExercises = (data) => ({\n  type: FETCH_EXERCISES,\n  payload: data,\n});\n\nconst fetchExercisesError = (err) => ({\n  type: FETCH_EXERCISES_ERROR,\n  payload: err,\n});\n\nconst fetchUsers = (users) => ({\n  type: FETCH_USERS,\n  payload: users,\n});\n\nconst fetchUsername = (user) => ({\n  type: FETCH_USER,\n  payload: user,\n});\n\nconst loading = () => ({\n  type: LOADING,\n});\n\nconst fetchUsersError = (data) => ({\n  type: FETCH_USERS_ERROR,\n  payload: data,\n});\n\n//<---------Exercise actions----------->\n\nexport const getExercises = () => async (dispatch) => {\n  dispatch(loading());\n  try {\n    const response = await api.get(\"exercises/\");\n    console.log(\"Exercises:\", response.data);\n    dispatch(fetchExercises(response.data));\n  } catch (e) {\n    dispatch(fetchExercisesError(\"City/State not found!\"));\n  }\n};\n\n// export const editExercise = (id) => async (dispatch) => {\n//   const response = await api.get(\"exercises/\", id);\n//   console.log(response);\n//   console.log(\"added!\");\n// };\n\nexport const updateExercise = (id, exercise) => async (dispatch) => {\n  const response = await api.post(`exercises/update/${id}`, exercise);\n  console.log(\"response!!!\", response);\n  console.log(\"updated!\");\n};\n\nexport const addExercise = (exercise) => async (dispatch) => {\n  const response = await api.post(\n    \"http://localhost:5000/exercises/add\",\n    exercise\n  );\n  console.log(response);\n};\n\nexport const deleteExercise = (id) => async (dispatch) => {\n  const response = await api.delete(\"exercises/\" + id);\n\n  console.log(\"delete\", response);\n};\n\n//<---------User actions----------->\n\nexport const getUsers = () => async (dispatch) => {\n  dispatch(loading());\n  try {\n    const response = await api.get(\"users/\");\n    // console.log(\"Users:\", response.data);\n    const users = response.data.map((user) => user.username);\n    const first_username = users[0];\n\n    dispatch(fetchUsers(users));\n    dispatch(fetchUsername(first_username));\n  } catch (e) {\n    dispatch(fetchUsersError(\"City/State not found!\"));\n  }\n};\n\nexport const addUser = (user) => async (dispatch) => {\n  dispatch(loading());\n  try {\n    const response = await api.post(\"users/add\", user);\n    console.log(\"USER ADDED\", response);\n  } catch (e) {\n    dispatch(fetchUsersError(\"City/State not found!\"));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}