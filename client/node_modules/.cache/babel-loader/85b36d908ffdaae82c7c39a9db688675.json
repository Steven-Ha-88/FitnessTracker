{"ast":null,"code":"import { FETCH_EXERCISES, FETCH_EXERCISES_ERROR, FETCH_USERS, FETCH_USERS_ERROR, LOADING } from \"./types\";\nimport api from \"./../api\";\n\nconst fetchExercises = data => ({\n  type: FETCH_EXERCISES,\n  payload: data\n});\n\nconst fetchExercisesError = err => ({\n  type: FETCH_EXERCISES_ERROR,\n  payload: err\n});\n\nconst fetchUsers = users => ({\n  type: FETCH_USERS,\n  payload: users\n});\n\nconst loading = () => ({\n  type: LOADING\n});\n\nconst fetchUsersError = data => ({\n  type: FETCH_USERS_ERROR,\n  payload: data\n}); //<---------Exercise actions----------->\n\n\nexport const getExercises = () => async dispatch => {\n  dispatch(loading());\n\n  try {\n    const response = await api.get(\"exercises/\");\n    console.log(\"Exercises:\", response.data);\n    dispatch(fetchExercises(response.data));\n  } catch (e) {\n    dispatch(fetchExercisesError(\"not found\"));\n  }\n};\nexport const updateExercise = (id, exercise) => async dispatch => {\n  try {\n    const response = await api.post(`exercises/update/${id}`, exercise);\n    console.log(response);\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const addExercise = exercise => async dispatch => {\n  try {\n    const response = await api.post(\"http://localhost:5000/exercises/add\", exercise);\n    console.log(response);\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getExercise = id => async dispatch => {\n  dispatch(loading());\n\n  try {\n    const response = await api.get(\"exercises/\" + id);\n    console.log(\"Exercises:\", response);\n    dispatch(fetchExercise(response.data));\n  } catch (e) {\n    dispatch(fetchExercisesError(\"not found\"));\n  }\n};\nexport const deleteExercise = id => async dispatch => {\n  try {\n    const response = await api.delete(\"exercises/\" + id);\n    console.log(response);\n  } catch (e) {\n    console.log(e);\n  }\n}; //<---------User actions----------->\n\nexport const getUsers = () => async dispatch => {\n  dispatch(loading());\n\n  try {\n    const response = await api.get(\"users/\"); // console.log(\"Users:\", response.data);\n\n    const users = response.data.map(user => user.username);\n    dispatch(fetchUsers(users));\n  } catch (e) {\n    dispatch(fetchUsersError(e));\n  }\n};\nexport const addUser = user => async dispatch => {\n  dispatch(loading());\n\n  try {\n    const response = await api.post(\"users/add\", user);\n    console.log(\"USER ADDED\", response);\n  } catch (e) {\n    dispatch(fetchUsersError(e));\n  }\n};","map":{"version":3,"sources":["/Users/ming/Projects/mern/src/actions/index.js"],"names":["FETCH_EXERCISES","FETCH_EXERCISES_ERROR","FETCH_USERS","FETCH_USERS_ERROR","LOADING","api","fetchExercises","data","type","payload","fetchExercisesError","err","fetchUsers","users","loading","fetchUsersError","getExercises","dispatch","response","get","console","log","e","updateExercise","id","exercise","post","addExercise","getExercise","fetchExercise","deleteExercise","delete","getUsers","map","user","username","addUser"],"mappings":"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","sourcesContent":["import {\n  FETCH_EXERCISES,\n  FETCH_EXERCISES_ERROR,\n  FETCH_USERS,\n  FETCH_USERS_ERROR,\n  LOADING,\n} from \"./types\";\n\nimport api from \"./../api\";\n\nconst fetchExercises = (data) => ({\n  type: FETCH_EXERCISES,\n  payload: data,\n});\n\nconst fetchExercisesError = (err) => ({\n  type: FETCH_EXERCISES_ERROR,\n  payload: err,\n});\n\nconst fetchUsers = (users) => ({\n  type: FETCH_USERS,\n  payload: users,\n});\n\nconst loading = () => ({\n  type: LOADING,\n});\n\nconst fetchUsersError = (data) => ({\n  type: FETCH_USERS_ERROR,\n  payload: data,\n});\n\n//<---------Exercise actions----------->\n\nexport const getExercises = () => async (dispatch) => {\n  dispatch(loading());\n  try {\n    const response = await api.get(\"exercises/\");\n    console.log(\"Exercises:\", response.data);\n    dispatch(fetchExercises(response.data));\n  } catch (e) {\n    dispatch(fetchExercisesError(\"not found\"));\n  }\n};\n\nexport const updateExercise = (id, exercise) => async (dispatch) => {\n  try {\n    const response = await api.post(`exercises/update/${id}`, exercise);\n    console.log(response);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const addExercise = (exercise) => async (dispatch) => {\n  try {\n    const response = await api.post(\n      \"http://localhost:5000/exercises/add\",\n      exercise\n    );\n    console.log(response);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const getExercise = (id) => async (dispatch) => {\n  dispatch(loading());\n  try {\n    const response = await api.get(\"exercises/\" + id);\n    console.log(\"Exercises:\", response);\n    dispatch(fetchExercise(response.data));\n  } catch (e) {\n    dispatch(fetchExercisesError(\"not found\"));\n  }\n};\n\nexport const deleteExercise = (id) => async (dispatch) => {\n  try {\n    const response = await api.delete(\"exercises/\" + id);\n    console.log(response);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n//<---------User actions----------->\n\nexport const getUsers = () => async (dispatch) => {\n  dispatch(loading());\n  try {\n    const response = await api.get(\"users/\");\n    // console.log(\"Users:\", response.data);\n    const users = response.data.map((user) => user.username);\n\n    dispatch(fetchUsers(users));\n  } catch (e) {\n    dispatch(fetchUsersError(e));\n  }\n};\n\nexport const addUser = (user) => async (dispatch) => {\n  dispatch(loading());\n  try {\n    const response = await api.post(\"users/add\", user);\n    console.log(\"USER ADDED\", response);\n  } catch (e) {\n    dispatch(fetchUsersError(e));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}